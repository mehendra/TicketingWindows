@model IEnumerable<TicketManager.web.TicketsIssued>

@{
    ViewBag.Title = "Assign Ticket";
}

<h2>Assign Ticket</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div>
    <form id="ticketAdd">
        <table>
            <tr><td>
                    <input type="text" name="ticketNumber" class="form-control text-box single-line" />
                    <input type="hidden" name="agentCode" value="@ViewData["agentCode"]"/>
                </td>
            <td><input type="submit" class="btn btn-default" /></td></tr>
        </table>
        
        
    </form>
    
</div>
<div>
    @Html.DisplayNameFor(model => model.TicketNumber)
</div>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Category)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ArrivedAt)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ArrivalConfirmedBy)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Agent.AgentName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TicketStatu.TicketStatus)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Category)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ArrivedAt)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ArrivalConfirmedBy)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Agent.AgentName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.TicketStatu.TicketStatus)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.TicketNumber }) |
            @Html.ActionLink("Details", "Details", new { id=item.TicketNumber }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.TicketNumber })
        </td>
    </tr>
}

</table>
<script>
    var request;

    // Bind to the submit event of our form
    $("#ticketAdd").submit(function (event) {

        // Prevent default posting of form - put here to work in case of errors
        event.preventDefault();

        // Abort any pending request
        if (request) {
            request.abort();
        }
        // setup some local variables
        var $form = $(this);

        // Let's select and cache all the fields
        var $inputs = $form.find("input, select, button, textarea");

        // Serialize the data in the form
        var serializedData = $form.serialize();

        // Let's disable the inputs for the duration of the Ajax request.
        // Note: we disable elements AFTER the form data has been serialized.
        // Disabled form elements will not be serialized.
        $inputs.prop("disabled", true);
        alert(serializedData);
        /*
        // Fire off the request to /form.php
        request = $.ajax({
            url: "/form.php",
            type: "post",
            data: serializedData
        });
        */
        // Callback handler that will be called on success
        request.done(function (response, textStatus, jqXHR) {
            // Log a message to the console
            console.log("Hooray, it worked!");
        });

        // Callback handler that will be called on failure
        request.fail(function (jqXHR, textStatus, errorThrown) {
            // Log the error to the console
            console.error(
                "The following error occurred: " +
                textStatus, errorThrown
            );
        });

        // Callback handler that will be called regardless
        // if the request failed or succeeded
        request.always(function () {
            // Reenable the inputs
            $inputs.prop("disabled", false);
        });

    });
</script>